---
interface Props {
  currentColor: string;
}

const { currentColor } = Astro.props;
---

<div class="max-w-80 w-full bg-slate-100 text-slate-900 font-sans p-6 rounded-lg border border-slate-100/20 shadow-lg flex flex-col gap-8">
    <div>
      <h1 class="text-2xl font-bold mb-4">Générateur de couleur aléatoire</h1>
      <p class="text-base font-regular">Générez une couleur aléatoire en un clic:</p>
    </div>
    <div class="flex flex-col gap-1">
        <span 
            class="text-xs text-zinc-600"
            >
            HEX code:
        </span>
        <div class="flex items-center gap-2">
            <span 
                id="colorCode"
                class="text-lg"
                >
                {currentColor}
            </span>
            <button 
                id="copyColor"
                class="relative border border-slate-300 rounded-md text-slate-900 text-base p-1 hover:bg-slate-300 group"
                >
                <span class="absolute bottom-full left-1/2 -translate-x-1/2 mb-2 px-2 py-1 text-xs text-slate-100 bg-slate-900 rounded opacity-0 group-hover:opacity-100 transition-opacity pointer-events-none whitespace-nowrap">
                    Copier le code
                </span>
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 256 256"><path d="M216,32H88a8,8,0,0,0-8,8V80H40a8,8,0,0,0-8,8V216a8,8,0,0,0,8,8H168a8,8,0,0,0,8-8V176h40a8,8,0,0,0,8-8V40A8,8,0,0,0,216,32ZM160,208H48V96H160Zm48-48H176V88a8,8,0,0,0-8-8H96V48H208Z"></path></svg>
            </button>
        </div>
    </div>
    <div class="flex flex-col gap-1">
        <button 
            id="generateColor"
            class="bg-slate-900 text-slate-100 font-semibold text-sm rounded p-2 hover:bg-opacity-90 transition-colors"
        >
            Générer une autre couleur aléatoire
        </button>
        <small class="text-slate-500 italic">Astuce : Appuyez sur la barre d'espace pour générer une nouvelle couleur au pif.</small>
    </div>
</div>

<!-- Add toast element -->
<div 
    id="toast" 
    class="fixed bottom-4 left-1/2 -translate-x-1/2 bg-slate-900 text-slate-100 border border-slate-100/50 px-4 py-2 rounded-lg opacity-0 transition-opacity duration-300 pointer-events-none"
>
    Couleur copiée !
</div>

<script>
  function generateRandomColor() {
    const letters = '0123456789ABCDEF';
    let color = '#';
    for (let i = 0; i < 6; i++) {
      color += letters[Math.floor(Math.random() * 16)];
    }
    return color;
  }

  function updateColor() {
    const newColor = generateRandomColor();
    document.getElementById('colorSection')!.style.backgroundColor = newColor;
    const colorCode = document.getElementById('colorCode');
    if (colorCode) colorCode.textContent = newColor;
  }

  // Add event listener for the button
  document.getElementById('generateColor')?.addEventListener('click', updateColor);

  // Add event listener for spacebar
  document.addEventListener('keydown', (event) => {
    if (event.code === 'Space' && !event.repeat && !(event.target as Element).matches('input, textarea')) {
      event.preventDefault(); // Prevent page scrolling
      updateColor();
    }
  });

  document.getElementById('copyColor')?.addEventListener('click', async () => {
    const colorCode = document.getElementById('colorCode')?.textContent;
    if (colorCode) {
      await navigator.clipboard.writeText(colorCode);
      
      // Show toast
      const toast = document.getElementById('toast');
      if (toast) {
        toast.classList.remove('opacity-0');
        setTimeout(() => {
          toast.classList.add('opacity-0');
        }, 2000);
      }
    }
  });
</script> 